import tensorflow as tf
import keras

import cv2
import numpy as np
from config import MODEL_PATH, CLASS_PATH, PREDICT_PATH, TRAINING_IMAGES_PATH, UNPROCESSED_IMAGES_PATH

# configures memory growth
gpus = tf.config.list_physical_devices('GPU')
try:
    tf.config.experimental.set_memory_growth(gpus[0], True)
except:
    pass

# opens list of classes generated by dataset_creation.py
class_file = open(CLASS_PATH, "r")
class_keys = class_file.read().split(",")
class_file.close()

print("\n====================================================================")
print("Processing image\n")

im = cv2.imread(PREDICT_PATH)
im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)

for y in range(0, 92):
    for x in range(0, 92):
        if im[y][x] < 237:
            im[y][x] = 1
        else:
            im[y][x] = 0

im = np.atleast_3d(im)
im = tf.image.resize(im, [92, 92])
im = np.expand_dims(im, 0)

print("\n====================================================================")
print("Loading model\n")

model = keras.models.load_model(MODEL_PATH)

output = np.squeeze(model(im, training=False))
print("guesses")
for i in np.flipud(np.argsort(output)[-5:]):
    print(chr(int(class_keys[i], 16)))

print("best guess")
print(chr(int(class_keys[np.argmax(output)], 16)))
